version: 2.1
orbs:
  python: circleci/python@2.1.1
defaults: &defaults
  docker:
    - image: google/cloud-sdk@sha256:2fe926e264f77892dc5bdab0ac44e54be3f4029d0ed178d04b7eef80bcd09fe4
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Generate full image name for new docker image
          command: |
            set -x
            DOCKER_IMAGE_TAG=${CIRCLE_BRANCH}
            echo "gcr.io/smartersorting-images/$CIRCLE_PROJECT_REPONAME:$DOCKER_IMAGE_TAG" > full_docker_image_name
      - run:
          name: Build image
          command: |
            FULL_DOCKER_IMAGE_NAME=$(cat full_docker_image_name)
            docker build -t $FULL_DOCKER_IMAGE_NAME .
      - run:
          name: Push image
          command: |
            FULL_DOCKER_IMAGE_NAME=$(cat full_docker_image_name)
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > gcloud-service-key.json
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud --quiet auth configure-docker
            docker push $FULL_DOCKER_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - full_docker_image_name
  test:
    docker:
      - image: 'cimg/python:3.10'
      - image: 'cimg/postgres:14.5'
        environment:
          POSTGRES_DB: test-products-db
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
    environment:
      POSTGRES_HOST: 127.0.0.1
      POSTGRES_DATABASE: test-products-db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
      PYTEST_FILTERS: "not wip"
    steps:
      - checkout
      - python/install-packages:
          args: --dev
          pkg-manager: pipenv
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://urldefense.com/v3/__https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64__;!!Nhk69END!at9TVwT3rR1Gas9lF_3k41XBWl2yi4igbmiyShGhYt8AkP2fUfpZq7Q5CpdVqpv87MU_-vXzBFyH3yFIVuKmR2q10g$  > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          command: |
            ./cc-test-reporter before-build
            pipenv run coverage run -m pytest -k "not wip" --junitxml=junit.xml
            pipenv run coverage xml
            ./cc-test-reporter after-build --coverage-input-type coverage.py --exit-code $?
      - store_test_results:
          path: junit.xml
  schemathesis:
    docker:
      - image: cimg/base:2022.12
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Run schemathesis api-conformance test
          command: docker-compose -f docker-compose-schemathesis.yml run schemathesis
      - run:
          name: Generate ERD
          command: docker-compose -f docker-compose-erd.yml run mermerd
  deploy:
    <<: *defaults
    parameters:
      env:
        type: string
        description: Which environment to deploy to
      helm_chart:
        type: enum
        enum: ["webservice", "worker", "cronjob"]
        default: "webservice"
        description: Which Helm chart to use
    environment:
      GOOGLE_APPLICATION_CREDENTIALS=gcloud-service-key.json
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Save google credentials
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > gcloud-service-key.json
      - run:
          name: Install SOPS
          command: |
            apt install -y wget
            wget -O sops  https://urldefense.com/v3/__https://github.com/mozilla/sops/releases/download/v3.7.1/sops-v3.7.1.linux__;!!Nhk69END!at9TVwT3rR1Gas9lF_3k41XBWl2yi4igbmiyShGhYt8AkP2fUfpZq7Q5CpdVqpv87MU_-vXzBFyH3yFIVuKC3VK1SA$ 
            chmod +x sops
            mv sops /usr/local/bin/sops
      - run:
          name: Install helm
          command: |
            curl -o helm.tar.gz -s https://urldefense.com/v3/__https://get.helm.sh/helm-$*7BHELM_VERSION*7D-linux-amd64.tar.gz__;JSU!!Nhk69END!at9TVwT3rR1Gas9lF_3k41XBWl2yi4igbmiyShGhYt8AkP2fUfpZq7Q5CpdVqpv87MU_-vXzBFyH3yFIVuJ9SaJUHw$ 
            tar -zxf helm.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
      - run:
          name: Install helm-gcs plugin
          command: |
            helm plugin install https://urldefense.com/v3/__https://github.com/hayorov/helm-gcs.git__;!!Nhk69END!at9TVwT3rR1Gas9lF_3k41XBWl2yi4igbmiyShGhYt8AkP2fUfpZq7Q5CpdVqpv87MU_-vXzBFyH3yFIVuKzhb-JtQ$  --version ${HELM_GCS_VERSION}
            helm repo add ${HELM_REPO_NAME} ${HELM_REPO_URL}
            helm repo update
      - run:
          name: Install helm-secrets plugin
          command: |
            helm plugin install https://urldefense.com/v3/__https://github.com/jkroepke/helm-secrets__;!!Nhk69END!at9TVwT3rR1Gas9lF_3k41XBWl2yi4igbmiyShGhYt8AkP2fUfpZq7Q5CpdVqpv87MU_-vXzBFyH3yFIVuIYAkNmOQ$  --version ${HELM_SECRETS_VERSION}
      - run:
          name: Deploy helm release
          command: |
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud container clusters get-credentials ${GOOGLE_CLUSTER_NAME} --region ${GOOGLE_COMPUTE_REGION} --project ${GOOGLE_PROJECT_ID}
            helm upgrade --install ${CIRCLE_PROJECT_REPONAME} --atomic \
            --namespace ${CIRCLE_PROJECT_REPONAME}${NAMESPACE_SUFFIX} --create-namespace \
            -f  helm/values-<< parameters.env >>.yaml \
            -f secrets://helm/secrets-<< parameters.env>>.enc.yaml \
            --set env=<< parameters.env >> \
            --set appVersion=sha-${CIRCLE_SHA1} \
            --set fullImage=$(cat /tmp/workspace/full_docker_image_name) \
            ${HELM_REPO_NAME}/<< parameters.helm_chart >>

workflows:
  staging:
    jobs:
      - build:
          context:
            - google-staging
      - test
      - schemathesis
      - deploy:
          env: staging
          helm_chart: webservice
          filters:
            branches:
              only:
                - staging
                - DEV-415-circleci
          context:
            - helm
            - google-staging
          requires:
            - build
            - test
            - schemathesis

